- - Exercícios Parte 1 - 1
	Desenvolva um código Python que lê do teclado nome e a idade atual de uma pessoa. 
	Como saída, imprima o ano em que a pessoa completará 100 anos de idade.


from datetime import date

data = date.today()
nome = input("Digite seu primeiro nome: ")
idade_aniv = int(input("Qual a sua idade? "))
centesimo_aniversario = (100 - idade_aniv) + data.year
print(centesimo_aniversario)




- - Exercícios Parte 1 - 2
	Escreva um código Python para verificar se três números digitados na entrada padrão são pares ou ímpares. 
	Para cada número, imprima como saída Par: ou Ímpar: e o número correspondente (um linha para cada número lido).
	Importante: Aplique a função range() em seu código.
	Exemplos de saída:
		Par: 2
		Ímpar: 3


lista_num = []
for num in range(3):
    numero = int(input("Digite um número inteiro: "))
    lista_num.append(numero)
for q in range(3):
    if lista_num[q] % 2 == 0:
        print(f'Par: {lista_num[q]}')
    else:
        print(f'Ímpar: {lista_num[q]}')




- - Exercícios Parte 1 - 3
	Escreva um código Python para imprimir os números pares de 0 até 20 (incluso).
	Importante: Aplique a função range() em seu código.


for num in range(21):
    if num % 2 == 0:
        print(num)


- - Exercícios Parte 1 - 4
	Escreva um código Python para imprimir todos os números primos entre 1 até 100. 
	Lembre-se que você deverá desenvolver o cálculo que identifica se um número é primo ou não
	Importante: Aplique a função range().


total = 0
for a in range(2,100):
    for c in range(2, a+1):
        if a % c == 0:
            total += 1
    if total < 2:
        print(a)
        total = 0
    else:
        total = 0



- - Exercícios Parte 1 - 5
	Escreva um código Python que declara 3 variáveis:
		dia, inicializada com valor 22
		mes, inicializada com valor 10 e
		ano, inicializada com valor 2022

	Como saída, você deverá imprimir a data correspondente, no formato a seguir dia/mes/ano.



dia = 22
mes = 10
ano = 2022
print(f'{dia}/{mes}/{ano}')




- - Exercícios Parte 2 - 1
	Considere as duas listas abaixo:
		a = [1, 1, 2, 3, 5, 8, 14, 21, 34, 55, 89]
		b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
	Escreva um programa para avaliar o que ambas as listas têm em comum (sem repetições), imprimindo a lista de valores da interseção na saída padrão.


a = [1, 1, 2, 3, 5, 8, 14, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

iguais = []
for n in range(len(a)):
    for m in range(len(b)):
        if b[m] == a[n]:
            iguais.append(a[n])
set(iguais)
semrepe= list(set(iguais))
print(semrepe)





- - Exercícios Parte 2 - 2
	Dada a seguinte lista:
		a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
	Faça um programa que gere uma nova lista contendo apenas números ímpares.



a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
b = [c for c in a if c % 2 != 0]
print(b)


- - Exercícios Parte 2 - 3
	Verifique se cada uma das palavras da lista ['maça', 'arara', 'audio', 'radio', 'radar', 'moto'] é ou não um palíndromo.
	Obs: Palíndromo é uma palavra que permanece igual se lida de traz pra frente.
	É necessário que você imprima no console exatamente assim:
		A palavra: maça não é um palíndromo 
		A palavra: arara é um palíndromo 
		A palavra: audio não é um palíndromo 
		A palavra: radio não é um palíndromo 
		A palavra: radar é um palíndromo 
		A palavra: moto não é um palíndromo


lista = ['maça', 'arara', 'audio', 'radio', 'radar', 'moto']
for n in range(len(lista)):
    if str(lista[n]) == str(lista[n])[::-1] :
        print("A palavra: {0} é um palíndromo".format(lista[n]))
    else:
        print("A palavra: {0} não é um palíndromo".format(lista[n]))



- - Exercícios Parte 2 - 4
	Dada as listas a seguir:
		primeirosNomes = ['Joao', 'Douglas', 'Lucas', 'José']
		sobreNomes = ['Soares', 'Souza', 'Silveira', 'Pedreira']
		idades = [19, 28, 25, 31]
	Faça um programa que imprima o dados na seguinte estrutura: "índice - primeiroNome sobreNome está com idade anos".
	Exemplo:
		0 - João Soares está com 19 anos


primeirosNomes = ['Joao', 'Douglas', 'Lucas', 'José']
sobreNomes = ['Soares', 'Souza', 'Silveira', 'Pedreira']
idades = [19, 28, 25, 31]
for i, nome in enumerate(primeirosNomes):
    print(f'{i} - {primeirosNomes[i]} {sobreNomes[i]} está com {idades[i]} anos')



- - Exercícios Parte 2 - 5
	Escreva uma função que recebe uma lista e retorna uma nova lista sem elementos duplicados. Utilize a lista a seguir para testar sua função.
		['abc', 'abc', 'abc', '123', 'abc', '123', '123']


def lista_nova(listarecebida):
    lista_sem_dup=set(listarecebida)
    lista_final = [x for x in lista_sem_dup]
    return print(lista_final)
lista = ['abc', 'abc', 'abc', '123', 'abc', '123', '123']
lista_nova(lista)


- - Exercícios Parte 2 - 6
	Escreva um programa que lê o conteúdo do arquivo texto arquivo_texto.txt e imprime o seu conteúdo.
	Dica: leia a documentação da função open(...)



arq = open('arquivo_texto.txt','r+')
leitura = arq.readlines()
for texto in leitura:
    print(texto, end="")



- - Exercícios Parte 2 - 7
	Leia o arquivo person.json, faça o parsing e imprima seu conteúdo.
	Dica: leia a documentação do pacote json

import json

with open('person.json','r') as arq:
    texto = json.load(arq)
print(texto)


- - Exercícios Parte 2 - 8
	Implemente a função my_map(list, f) que recebe uma lista como primeiro argumento e uma função como segundo argumento. 
	Esta função aplica a função recebida para cada elemento da lista recebida e retorna o resultado em uma nova lista.
	Teste sua função com a lista de entrada [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] e com uma função que potência de 2 para cada elemento.


lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
my_map=list(map(lambda x:x**2,lista))
print(my_map)



- - Exercícios Parte 2 - 9
	Escreva uma função que recebe um número variável de parâmetros não nomeados e um número variado de parâmetros nomeados 
	e imprime o valor de cada parâmetro recebido.
	Teste sua função com os seguintes parâmetros:
		(1, 3, 4, 'hello', parametro_nomeado='alguma coisa', x=20)

def dados(*args, **kwargs):
    for argumento in args:
        print(argumento)
    for chave, valor in kwargs.items():
        print(valor)
dados(1, 3, 4, 'hello', parametro_nomeado='alguma coisa', x=20)


- - Exercícios Parte 2 - 10
	Implemente a classe Lampada. A classe Lâmpada recebe um booleano no seu construtor, True se a lâmpada estiver ligada, False caso esteja desligada. 
	A classe Lampada possuí os seguintes métodos:
		liga(): muda o estado da lâmpada para ligada
		desliga(): muda o estado da lâmpada para desligada
		esta_ligada(): retorna verdadeiro se a lâmpada estiver ligada, falso caso contrário
	Para testar sua classe:
		Ligue a Lampada
		Imprima: A lâmpada está ligada? True
		Desligue a Lampada
		Imprima: A lâmpada ainda está ligada? False


class Lampada:

    def __init__(self, ligada):
        self.ligada = False

    def esta_ligada(self):
        if self.ligada:
            return f'A lâmpada está ligada? {True}'
        else:
            return f'A lâmpada ainda está ligada? {False}'

    def liga(self):
        self.ligada = True
        self.esta_ligada()

    def desliga(self):
        self.ligada = False
        self.esta_ligada()




- - Exercícios Parte 2 - 11
	Escreva uma função que recebe uma string de números separados por vírgula e retorne a soma de todos eles. Depois imprima a soma dos valores.
	A string deve ter valor  "1,3,4,6,10,76"


def funcao(a):    
    return print(sum(a))

valor="1,3,4,6,10,76"
lista=valor.split(',')
listadois=[]
l=0
for n in lista:
    l = int(n)
    listadois.append(l)
funcao(listadois)



- - Exercícios Parte 2 - 12
	Escreva uma função que recebe como parâmetro uma lista e retorna 3 listas: a lista recebida dividida em 3 partes iguais. 
	Teste sua implementação com a lista abaixo
		lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

def funcao(a):
    b=len(a)//3
    listaum=[]
    listadois=[]
    listatres=[]
    for x in range(len(a)):
        if x < b:
            listaum.append(a[x])
        elif b <= x < 2*b:
            listadois.append(a[x])
        else:
            listatres.append(a[x])
    return print(listaum, listadois, listatres)
lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
funcao(lista)



- - Exercícios Parte 2 - 13
	Dado o dicionário a seguir:
		speed = {'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53, 'july':54, 'Aug':44, 'Sept':54}
	Crie uma lista com todos os valores (não as chaves!) e coloque numa lista de forma que não haja valores duplicados.


speed = {'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53, 'july':54, 'Aug':44, 'Sept':54}
valores=[]
for i, valor in enumerate(speed):
    valores.append(speed[valor])
sem_duplicata=list(set(valores))
print(sem_duplicata)



- - Exercícios Parte 2 - 14
	Calcule o valor mínimo, valor máximo, valor médio e a mediana da lista gerada na célula abaixo:
	Obs.: Lembrem-se, para calcular a mediana a lista deve estar ordenada!
	
	import random 
	# amostra aleatoriamente 50 números do intervalo 0...500
	random_list = random.sample(range(500),50)

	Use as variáveis abaixo para representar cada operação matemática

	mediana
	media
	valor_minimo 
	valor_maximo 


import random

random_list = random.sample(range(500), 50)
ordenada = sorted(random_list)
n = len(ordenada)
if n % 2 == 0:
    mediana_um = ordenada[n // 2]
    mediana_dois = ordenada[n // 2 - 1]
    mediana = (mediana_um + mediana_dois) / 2
else:
    mediana = ordenada[n // 2]
media = sum(ordenada)/len(ordenada)
valor_minimo = min(ordenada)
valor_maximo = max(ordenada)
print(f'Media: {media}, Mediana: {mediana}, Mínimo: {valor_minimo}, Máximo: {valor_maximo}')


- - Exercícios Parte 2 - 15
	Imprima a lista abaixo de trás para frente.
		a = [1, 0, 2, 3, 5, 8, 13, 21, 34, 55, 89]

a = [1, 0, 2, 3, 5, 8, 13, 21, 34, 55, 89]
print(a[::-1])


- - Exercícios Parte 3 - 1
	Implemente duas classes Pato e Pardal que herdem de uma classe Passaro a habilidade de voar e emitir som, 
	porém, tanto Pato quanto Pardal devem emitir sons diferentes (de maneira escrita) no console.

	Imprima no console exatamente assim:
		Pato
		Voando...
		Pato emitindo som...
		Quack Quack
		Pardal
		Voando...
		Pardal emitindo som...
		Piu Piu



class Passaro:

    def __init__(self, nome):
        self.__nome = nome

    def voar(self):
        print(f'{self.__nome} \nVoando...')

    def emitir_som(self):
        raise

class Pato(Passaro):

    def __init__(self, nome):
        super().__init__(nome)

    def emitir_som(self):
        print(f'{self._Passaro__nome} emitindo som... \nQuack Quack')


class Pardal(Passaro):

    def __init__(self, nome):
        super().__init__(nome)

    def emitir_som(self):
        print(f'{self._Passaro__nome} emitindo som... \nPiu Piu')



- - Exercícios Parte 3 - 2
	Crie uma classe chamada "Pessoa" com um atributo privado "nome" (representado como "__nome") e um atributo público "id". 
	Adicione duas funções à classe, uma para definir o valor de "nome" e outra para obter o valor de "nome". 
	Observe que o atributo "nome" deve ser privado e acessado somente através dessas funções.
	Para testar seu código use:
		pessoa = Pessoa(0) 
		pessoa.nome = 'Fulano De Tal'
		print(pessoa.nome)


class Pessoa:

    def __init__(self, id):
        self.id = id

    def nome(self, name):
        self.__nome = name

pessoa = Pessoa(0)
pessoa.nome = 'Fulano De Tal'
print(pessoa.nome)



- - Exercícios Parte 3 - 3
	Crie uma classe  Calculo  que contenha um método que aceita dois parâmetros, X e Y, e retorne a soma dos dois. 
	Nessa mesma classe, implemente um método de subtração, que aceita dois parâmetros, X e Y, e 
	retorne a subtração dos dois (resultados negativos são permitidos).
	Utilize os valores abaixo para testar seu exercício:
		x = 4 
		y = 5
	imprima:
		Somando: 4+5 = 9
		Subtraindo: 4-5 = -1


class Calculo:

    def __init__(self, x, y) -> None:
        self.x = x
        self.y = y

    def soma(self):
        return f'Somando: {self.x}+{self.y} = {self.x+self.y}'

    def subtrair(self):
        return f'Subtraindo: {self.x}-{self.y} = {self.x-self.y}'


- - Exercícios Parte 3 - 4
	Crie uma classe Ordenadora que contenha um atributo listaBaguncada e que contenha os métodos ordenacaoCrescente e ordenacaoDecrescente.
	Instancie um objeto chamado crescente dessa classe Ordenadora que tenha como listaBaguncada a lista [3,4,2,1,5] e instancie um outro objeto, 
	decrescente dessa mesma classe com uma outra listaBaguncada sendo [9,7,6,8].
	Para o primeiro objeto citado, use o método ordenacaoCrescente e para o segundo objeto, use o método ordenacaoDecrescente.
	Imprima o resultado da ordenação crescente e da ordenação decresce
		[1, 2, 3, 4, 5] 
		[9, 8, 7, 6]


class Ordenadora:
    
    listaBaguncada = []

    def __init__(self, listaBaguncada):
        self.__listaBaguncada = listaBaguncada

    def ordenacaoDecrescente(self):
        return sorted(self.listaBaguncada, reverse=True)

    def ordenacaoCrescente(self):
        return sorted(self.listaBaguncada)






- - Exercícios Parte 3 - 5
	Crie uma classe Avião que possua os atributos modelo, velocidade_maxima, cor e capacidade.
	Defina o atributo cor de sua classe , de maneira que todas as instâncias de sua classe avião sejam da cor “azul”.
	Após isso, a partir de entradas abaixo, instancie e armazene em uma lista 3 objetos da classe Avião.
	Ao final, itere pela lista imprimindo cada um dos objetos no seguinte formato:
		“O avião de modelo “x” possui uma velocidade máxima de “y”, capacidade para “z” passageiros e é da cor “w”.
		Sendo x, y, z e w cada um dos atributos da classe “Avião”.
	Valores de entrada:
		modelo BOIENG456: velocidade máxima 1500 km/h: capacidade para 400 passageiros: Cor Azul
		modelo Embraer Praetor 600: velocidade máxima 863km/h: capacidade para 14 passageiros: Cor Azul
		modelo Antonov An-2: velocidade máxima de 258 Km/h: capacidade para 12 passageiros: Cor Azul




class Aviao:

   def __init__(self, modelo, velocidade_maxima, capacidade):
       self.modelo = modelo
       self.velocidade_maxima = velocidade_maxima
       self.cor = "azul"
       self.capacidade = capacidade

lista_de_avioes = []

lista_de_avioes.append(Aviao("BOIENG456", 1500, 400))
lista_de_avioes.append(Aviao("Embraer Praetor 600", 863, 14))
lista_de_avioes.append(Aviao("Antonov An-2", 258, 12))

for i in lista_de_avioes:
    print(f'O avião de modelo “{i.modelo}” possui uma velocidade máxima de “{i.velocidade_maxima}”, "capacidade para “{i.capacidade}” passageiros e é da cor “{i.cor}”.')





















